// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(StorageDbContext))]
    [Migration("20221122144217_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CREATED_AT");

                    b.Property<DateTime>("LastEdit")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LAST_EDIT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("INVENTORIES");
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ADDED_AT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsMissing")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_MISSING");

                    b.Property<int>("ItemType")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_TYPE");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATION_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("ITEMS");
                });

            modelBuilder.Entity("Model.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("ADDRESS");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("INVENTORY_ID");

                    b.Property<bool>("IsRemote")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_REMOTE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("LOCATIONS");
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.HasOne("Model.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Model.Entities.Location", b =>
                {
                    b.HasOne("Model.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
