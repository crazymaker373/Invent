@using Domain.Services
@inject IDialogService DialogService
@inject ViewRefreshService ViewRefreshService

<MudDataGrid T="Item" Items="@ItemList" SortMode="SortMode.Multiple" Filterable="true"
             Hideable="true" Virtualize="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Items @(Location is not null ? $"in {Location.Name}" : "")</MudText>
        <MudSpacer/>
        <MudTextField T="string" Value="_searchString" ValueChanged="Search" Placeholder="Search by name" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="Item"/>
        <Column T="Item" Field="Id" Title="Nr" Filterable="false"/>
        <Column T="Item" Field="Name"/>
        <Column T="Item" Title="Position" Sortable="false">
            <CellTemplate>
                <MudText>@context.Item.Location.Name</MudText>
            </CellTemplate>
        </Column>
        <Column T="Item" Field="ItemType"/>
        <Column T="Item" Field="Code" Sortable="false"/>
        <Column T="Item" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudButton StartIcon="@Icons.Material.Filled.QrCode" OnClick="() => OpenQrCodeDialog(context.Item)"/>
                <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OpenEditItemDialog(context.Item)"/>
                <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OpenDeleteItemDialog(context.Item)"/>
            </CellTemplate>
        </Column>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@context.Item.Description</MudText>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="Item"/>
    </PagerContent>
</MudDataGrid>
<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Class="floating-button-right" @onclick="OpenCreateItemDialog"/>


@code {

    [Parameter]
    [EditorRequired]
    public List<Item> ItemList { get; set; }

    [Parameter]
    [EditorRequired]
    public int InventoryId { get; set; }
    
    [Parameter]
    public Location? Location { get; set; }

    List<Item> ItemListBackup { get; set; } = new();
    
    string? _searchString;

    protected override void OnParametersSet() {
        ItemListBackup = ItemList;
    }

    void Search(string? searchString) {
        _searchString = searchString;
        if (!string.IsNullOrEmpty(_searchString) || !string.IsNullOrWhiteSpace(_searchString)) {
            ItemList = ItemListBackup.Where(x => x.Name.Contains(_searchString)).ToList();
        }
        else {
            ItemList = ItemListBackup;
        }
    }

    async void OpenDeleteItemDialog(Item item) {
        var parameters = new DialogParameters {{"Item", item}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<DeleteItemDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        ItemList.Remove(item);
        ViewRefreshService.RefreshView();
    }

    async void OpenEditItemDialog(Item item) {
        var parameters = new DialogParameters {{"Item", item}, {"InventoryId", InventoryId}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<EditItemDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        ViewRefreshService.RefreshView();
    }

    async void OpenCreateItemDialog() {
        var parameters = new DialogParameters {{"InventoryId", InventoryId}};
        if (Location is not null) {
            parameters.Add("Location", Location);
        }
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<CreateItemDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var item = (Item) result.Data;
        ItemList.Add(item);
        ViewRefreshService.RefreshView();
    }
    
    async void OpenQrCodeDialog(Item item) {
        var parameters = new DialogParameters {{"Item", item}};
        var options = new DialogOptions {CloseOnEscapeKey = true, CloseButton = true};
        var dialog = DialogService.Show<ShowQRCodeDialog>("QR Code of " + item.Name, parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        ViewRefreshService.RefreshView();
    }

}