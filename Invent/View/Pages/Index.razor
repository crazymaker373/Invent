@page "/"
@inherits SidebarComponent
@inject IInventoryRepository InventoryRepository
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<DataInit Data="Inventories">
    <ChildContent Context="inventories">
        @if (inventories.Any()) {
            <MudContainer Class="d-flex row align-center justify-center">
                @foreach (var inventory in Inventories) {
                    <MudCard Class="col-4 m-2">
                        <MudLink Href=@($"/{inventory.Id}/locations") Underline="Underline.None" Color="Color.Default" Class="text-decoration-none">
                            <MudCardMedia Image="images/inventory.png" Height="200"/>
                            <MudCardContent>
                                <MudText Typo="Typo.h5">@inventory.Name</MudText>
                                <MudText Typo="Typo.body2">Last edited: @inventory.LastEdit</MudText>
                                <MudText Typo="Typo.body2">Created At: @inventory.CreatedAt</MudText>
                            </MudCardContent>
                        </MudLink>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OpenEditInventoryDialog(inventory)">Edit</MudButton>
                            <MudSpacer/>
                            <MudButton Variant="Variant.Text" Color="Color.Success" StartIcon="@Icons.Material.Filled.ImportExport" OnClick="() => OpenExportInventoryDialog(inventory)">Export</MudButton>
                            <MudSpacer/>
                            <MudButton Variant="Variant.Text" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OpenDeleteInventoryDialog(inventory)">Delete</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </MudContainer>
        }
        else {
            <MudText Typo="Typo.h5">Noch kein Inventar erstellt</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenCreateInventoryDialog" StartIcon="@Icons.Material.Filled.Add">Inventar erstellen</MudButton>
        }
    </ChildContent>
</DataInit>

<MudFab Class="floating-button-left" Color="Color.Success" OnClick="OpenImportInventoryDialog" StartIcon="@Icons.Material.Filled.ImportExport" Label="Import" Size="Size.Large"/>
<MudFab Class="floating-button-right" Color="Color.Primary" OnClick="OpenCreateInventoryDialog" StartIcon="@Icons.Material.Filled.Add"/>

@code {

    List<Inventory> Inventories { get; set; } = new ();

    protected override async Task OnInitializedAsync() {
        Inventories = await InventoryRepository.ReadAllGraphAsync();


        await base.OnInitializedAsync();
    }

    async void OpenEditInventoryDialog(Inventory inventory) {
        var parameters = new DialogParameters {{"Inventory", inventory}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<EditInventoryDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultData = (Inventory) result.Data;
        var index = Inventories.IndexOf(resultData);
        Inventories[index] = resultData;
        StateHasChanged();
    }

    async void OpenDeleteInventoryDialog(Inventory inventory) {
        var parameters = new DialogParameters {{"Inventory", inventory}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<DeleteInventoryDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultData = (Inventory) result.Data;
        Inventories.Remove(resultData);
        StateHasChanged();

    }

    async void OpenCreateInventoryDialog() {
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<CreateInventoryDialog>("", options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultData = (Inventory) result.Data;
        Inventories.Add(resultData);
        StateHasChanged();
    }
    
    async void OpenExportInventoryDialog(Inventory inventory) {
        var parameters = new DialogParameters {{"Inventory", inventory}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<ExportInventoryDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
    }
    
    async void OpenImportInventoryDialog() {
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<ImportInventoryDialog>("", options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultData = (Inventory) result.Data;
        Inventories.Add(resultData);
        StateHasChanged();
    }

}