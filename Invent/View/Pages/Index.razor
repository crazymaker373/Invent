@page "/"
@using Domain.Repositories
@using Model.Entities
@using View.Pages.Dialogs
@inherits SidebarComponent
@inject IInventoryRepository _inventoryRepository
@inject NavigationManager _navigationManager
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

@if (Inventories != null) {
    foreach (var inventory in Inventories) {
        <MudCard Class="col-4">
            <MudLink Href=@($"/{inventory.Id}/items") Underline="Underline.None" Color="Color.Default" Class="text-decoration-none">
                <MudCardMedia Image="images/inventory.png" Height="200"/>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@inventory.Name</MudText>
                    <MudText Typo="Typo.body2">Last edited: @inventory.LastEdit</MudText>
                    <MudText Typo="Typo.body2">Created At: @inventory.CreatedAt</MudText>
                </MudCardContent>
            </MudLink>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OpenEditInventoryDialog(inventory)">Edit</MudButton>
            </MudCardActions>
        </MudCard>
    }
}
else {
    <MudText Typo="Typo.h5">Noch kein Inventar erstellt</MudText>
    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenCreateInventoryDialog" StartIcon="@Icons.Material.Filled.Add">Inventar erstellen</MudButton>
}

<MudFab Class="floating-button" Color="Color.Primary" OnClick="OpenCreateInventoryDialog" StartIcon="@Icons.Material.Filled.Add"/>

@code {

    public List<Inventory> Inventories { get; set; }

    protected override async Task OnInitializedAsync() {
        Inventories = await _inventoryRepository.ReadAllAsync();
        
        
        await base.OnInitializedAsync();
    }
    
    private void OpenEditInventoryDialog(Inventory inventory)
    {
        var parameters = new DialogParameters(){ {"Inventory", inventory} };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true};
        DialogService.Show<EditInventoryDialog>("", parameters, options);
    }
    
    private void OpenCreateInventoryDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true};
        DialogService.Show<CreateInventoryDialog>("", options);
    }

}