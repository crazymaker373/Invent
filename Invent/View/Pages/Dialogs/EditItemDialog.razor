@using Model.Entities
@using Domain.Repositories
@using Model.Configurations
@inject IItemRepository _itemRepository
@inject ILocationRepository _locationRepository

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Edit @Item.Name</MudText>
    </DialogContent>
    <DialogActions>
        <EditForm Model="@Item" OnValidSubmit="OnValidSubmit" class="container-fluid">
            <DataAnnotationsValidator/>
            <MudGrid Class="d-block">
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Name"
                                          @bind-Value="Item.Name" For="@(() => Item.Name)"/>
                            <MudTextField Label="Description" Class="mt-3"
                                          @bind-Value="Item.Description" For="@(() => Item.Description)"/>
                            <MudTextField Label="Code" Class="mt-3"
                                          @bind-Value="Item.Code" For="@(() => Item.Code)"/>
                            
                            <MudSelect T="EItemType" Label="Itemtype"
                                       Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter"
                                       @bind-Value="Item.ItemType" For="@(() => Item.ItemType)">
                                @foreach (var type in Enum.GetValues<EItemType>()) {
                                    <MudSelectItem Value="type"/>
                                }
                            </MudSelect>
                            <MudSelect T="Location" Label="Location"
                                       Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter"
                                       @bind-Value="Item.Location" For="@(() => Item.Location)">
                                @foreach (var location in Locations) {
                                    <MudSelectItem Value="@location">@location.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }= null!;

    [Parameter]
    public Item Item { get; set; } = null!;

    [Parameter]
    public int InventoryId { get; set; }

    public List<Location> Locations { get; set; } = new ();

    void Submit() => MudDialog.Close(DialogResult.Ok(Item));
    void Cancel() => MudDialog.Cancel();
    
    protected override async Task OnInitializedAsync() {
        Locations = await _locationRepository.ReadGraphAsync(InventoryId);

    }

    private async Task OnValidSubmit(EditContext context) {
        await _itemRepository.UpdateAsync(Item);
        Console.WriteLine("Item updated");
        Submit();
    }

}