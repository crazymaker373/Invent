@using Domain.Services
@using Microsoft.EntityFrameworkCore
@using Model.Configurations
@inject IItemRepository ItemRepository
@inject ILocationRepository LocationRepository
@inject IHashGeneratorService HashGeneratorService
@inject StorageDbContext Context

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Edit @Item.Name</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@Item" OnValidSubmit="OnValidSubmit" class="container-fluid">
            <DataAnnotationsValidator/>
            <MudGrid Class="d-block">
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Name"
                                          @bind-Value="Item.Name" For="@(() => Item.Name)"/>
                            <MudTextField Label="Description" Class="mt-3"
                                          @bind-Value="Item.Description" For="@(() => Item.Description)"/>
                            <MudTextField Label="Code" Class="mt-3"
                                          @bind-Value="Item.Code" For="@(() => Item.Code)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Autorenew" OnAdornmentClick="GenerateCodeAsync" ReadOnly="true"/>
                            <MudSelect T="EItemType" Label="Itemtype"
                                       Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter"
                                       @bind-Value="Item.ItemType" For="@(() => Item.ItemType)">
                                @foreach (var type in Enum.GetValues<EItemType>()) {
                                    <MudSelectItem Value="type"/>
                                }
                            </MudSelect>
                            <MudSelect Label="Location"
                                       Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter"
                                       @bind-Value="Item.Location" For="@(() => Item.Location)" ToStringFunc="location => location.Name">
                                @foreach (var location in Locations) {
                                    <MudSelectItem Value="@location">@location.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public Item Item { get; set; } = null!;

    [Parameter]
    public int InventoryId { get; set; }

    public List<Location> Locations { get; set; } = new();

    void Submit() {
        MudDialog.Close(DialogResult.Ok(Item));
    }

    void Cancel() {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync() {
        Locations = await LocationRepository.ReadGraphAsync(InventoryId);
    }

    private async Task OnValidSubmit(EditContext context) {
        // TODO speichert nicht in DB, warum auch immer
        Context.ChangeTracker.Clear();
        Context.Entry(Item).State = EntityState.Modified;
        await Context.SaveChangesAsync();
        //await ItemRepository.UpdateAsync(Item);
        Submit();
    }

    public async Task GenerateCodeAsync() {
        Item.Code = await HashGeneratorService.GenerateHashAsync(Item.Location.Name);
    }

}