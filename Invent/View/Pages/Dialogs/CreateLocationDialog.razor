@using Model.Entities
@using Domain.Repositories
@using Microsoft.CodeAnalysis.VisualBasic
@using Model.Configurations
@using System.Reflection.Metadata.Ecma335
@inject IRepository<Location> _locationRepository
@inject IInventoryRepository _inventoryRepository
@inject NavigationManager _navigationManager

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Create Location</MudText>
    </DialogContent>
    <DialogActions>
        <EditForm Model="@Location" OnValidSubmit="OnValidSubmitAsync" class="container-fluid">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="Location.Name" For="@(() => Location.Name)"/>
                    <MudBooleanInput Label="Is Remote" @bind-Value="Location.IsRemote" For="@(() => Location.IsRemote)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public string InventoryId { get; set; }

    public Location Location { get; set; } = new();
    
    bool success;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();


    private async Task OnValidSubmitAsync(EditContext context) {
        success = true;
        Location.InventoryId = Convert.ToInt32(InventoryId);
        await _locationRepository.CreateAsync(Location);
        var current = await _inventoryRepository.ReadAsync(Convert.ToInt32(InventoryId));
        await _inventoryRepository.UpdateLastEditAsync(current);
        Submit();
        _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
    }

}