@inject ILocationRepository LocationRepository
@inject IInventoryRepository InventoryRepository

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Create Location</MudText>
    </DialogContent>
    <DialogActions>
        <EditForm Model="@Location" OnValidSubmit="OnValidSubmitAsync" class="container-fluid">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="Location.Name" For="@(() => Location.Name)"/>
                    <MudTextField Label="Address" @bind-Value="Location.Address" For="@(() => Location.Address)"/>
                    <MudBooleanInput Label="Is Remote" @bind-Value="Location.IsRemote" For="@(() => Location.IsRemote)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int InventoryId { get; set; }

    public Location Location { get; set; } = new();

    void Submit() {
        MudDialog.Close(DialogResult.Ok(Location));
    }

    void Cancel() {
        MudDialog.Cancel();
    }


    private async Task OnValidSubmitAsync(EditContext context) {
        Location.InventoryId = InventoryId;
        await LocationRepository.CreateAsync(Location);
        var current = await InventoryRepository.ReadAsync(Convert.ToInt32(InventoryId));
        await InventoryRepository.UpdateLastEditAsync(current!);
        Submit();
    }

}