@using Domain.Services
@using Model.Entities.Dtos
@inject IItemRepository ItemRepository
@inject IInventoryRepository InventoryRepository
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Import Inventory</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="Json" Label="Json"/>
    </DialogContent>
    <DialogActions>
        <MudButton EndIcon="@Icons.Material.Filled.ImportExport" Color="Color.Success" Variant="Variant.Outlined" OnClick="ImportInventory">Import</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    public string Json { get; set; } = "";

    public Inventory NewInventory { get; set; } = new();

    void Submit() {
        MudDialog.Close(DialogResult.Ok(NewInventory));
    }

    private async Task ImportInventory() {
        var allItems = await ItemRepository.ReadAllAsync();
        var inventory = SerializeService.Deserialize<InventoryDto>(Json);
        var itemsToRemove = new List<ItemDto>();
        foreach (var location in inventory.Locations) {
            itemsToRemove.AddRange(location.Items.Where(item => allItems.Any(x => x.Code == item.Code)));
            location.Items.RemoveAll(x => itemsToRemove.Contains(x));
        }
        NewInventory = await InventoryRepository.CreateAsync(inventory.ToInventory());
        if (itemsToRemove.Any()) {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add($"The following items were not imported because they already exist: {string.Join(", ", itemsToRemove.Select(x => x.Name))}",
                Severity.Error);
        }
        Submit();
    }

}