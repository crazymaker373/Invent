@inject IInventoryRepository InventoryRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Edit @Inventory.Name</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@Inventory" OnValidSubmit="OnValidSubmitAsync" class="container-fluid">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name" @bind-Value="Inventory.Name" For="@(() => Inventory.Name)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Rename</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public Inventory Inventory { get; set; } = null!;

    void Submit() {
        MudDialog.Close(DialogResult.Ok(Inventory));
    }

    void Cancel() {
        MudDialog.Cancel();
    }


    private async Task OnValidSubmitAsync(EditContext context) {
        await InventoryRepository.UpdateAsync(Inventory);
        Submit();
    }

}