@using Domain.Services
@inject IItemRepository ItemRepository
@inject ILocationRepository LocationRepository
@inject IHashGeneratorService HashGeneratorService

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Create Item</MudText>
    </DialogContent>
    <DialogActions>
        <EditForm Model="@NewItem" OnValidSubmit="OnValidSubmit" class="container-fluid">
            <DataAnnotationsValidator/>
            <MudGrid Class="d-block">
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Name"
                                          @bind-Value="NewItem.Name" For="@(() => NewItem.Name)"/>
                            <MudTextField Label="Description" Class="mt-3"
                                          @bind-Value="NewItem.Description" For="@(() => NewItem.Description)"/>
                            <MudTextField Label="Code" Class="mt-3" disabled="true"
                                          @bind-Value="NewItem.Code" For="@(() => NewItem.Code)"/>
                            <MudSelect T="EItemType" Label="Itemtype" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="NewItem.ItemType" For="@(() => NewItem.ItemType)">
                                @foreach (var type in Enum.GetValues<EItemType>()) {
                                    <MudSelectItem Value="type"/>
                                }
                            </MudSelect>
                            <MudSelect T="Location" Label="Location" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="NewItem.Location" For="@(() => NewItem.Location)">
                                @foreach (var location in Locations) {
                                    <MudSelectItem Value="location">@location.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int InventoryId { get; set; }
    
    [Parameter]
    public Location? Location { get; set; }

    public Item NewItem { get; set; } = new();

    public List<Location> Locations { get; set; } = new();

    void Submit() {
        MudDialog.Close(DialogResult.Ok(NewItem));
    }

    void Cancel() {
        MudDialog.Cancel();
    }

    protected override async Task OnParametersSetAsync() {
        Locations = await LocationRepository.ReadGraphAsync(InventoryId);
        NewItem.Location = Location ?? Locations.First();
    }


    private void OnValidSubmit(EditContext context){
        NewItem.Code = HashGeneratorService.GenerateHash(Location.Name);
        ItemRepository.CreateAsync(NewItem);
        Submit();
    }
}