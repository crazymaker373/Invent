@page "/{id:int}/locations"
@inherits SidebarComponent
@inject IInventoryRepository InventoryRepository
@inject IDialogService DialogService

<PageTitle>Locations</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">Locations</MudText>

<DataInit Data="Inventory.Locations">
    <ChildContent Context="locations">
        @if (locations.Any()) {
            <MudCarousel Class="mud-width-full full-height" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false" TData="Location">
                @foreach (var location in locations) {
                    <MudCarouselItem Transition="Transition.Slide">
                        <div>
                            <div class="d-flex animate-up-down">
                                <MudLink Href=@($"/{Id}/{location.Id}/items") Class="mx-auto my-auto">
                                    @if (location.IsRemote) {
                                        <MudImage Src="images/truck.png" Height="700" Class="rounded-lg"/>
                                    }
                                    else {
                                        <MudImage Src="room1.svg" Height="700"/>
                                    }
                                </MudLink>
                            </div>
                            <MudText Align="Align.Center" Typo="Typo.h5">
                                @location.Name
                            </MudText>
                            <MudText Align="Align.Center">@location.Address</MudText>
                            <MudText Align="Align.Center">@(location.IsRemote ? "is Remote" : "is not remote")</MudText>
                            <div class="text-center">
                                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => OpenEditLocationDialog(location))" Size="Size.Small"/>
                                <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="@(() => OpenDeleteLocationDialog(location))" Size="Size.Small"/>
                            </div>
                        </div>
                    </MudCarouselItem>
                }
            </MudCarousel>
        }
        else {
            <MudText Typo="Typo.h5">No location found</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenCreateLocationDialog" StartIcon="@Icons.Material.Filled.Add">Add Location</MudButton>
        }
    </ChildContent>
</DataInit>

<MudFab Class="floating-button-right" Style="right: 100px !important;" Color="Color.Primary" OnClick="OpenCreateLocationDialog" StartIcon="@Icons.Material.Filled.Add"/>


@code{

    [Parameter]
    public int Id { get; set; }

    private Inventory Inventory { get; set; } = new();

    protected override async Task OnParametersSetAsync() {
        Inventory = await InventoryRepository.ReadGraphAsync(Id);
    }

    protected override async Task OnInitializedAsync() {
        SidebarItems.Add(new SidebarItem {
            Name = "Locations",
            Link = $"{Id}/locations"
        });
        SidebarItems.Add(new SidebarItem {
            Name = "Items",
            Link = $"{Id}/items"
        });
        await base.OnInitializedAsync();
    }


    private async void OpenCreateLocationDialog() {
        var parameters = new DialogParameters {{"InventoryId", Id}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<CreateLocationDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        StateHasChanged();
    }

    private async void OpenDeleteLocationDialog(Location location) {
        var parameters = new DialogParameters {{"Location", location}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<DeleteLocationDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        Inventory.Locations.Remove(location);
        StateHasChanged();
    }

    private async void OpenEditLocationDialog(Location location) {
        var parameters = new DialogParameters {{"Location", location}, {"InventoryId", Id}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<EditLocationDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        StateHasChanged();
    }

}