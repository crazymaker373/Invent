@page "/{id:int}/{locationId:int}/items"
@using Domain.Services
@inherits SidebarComponent
@inject IItemRepository ItemRepository
@inject ViewRefreshService ViewRefreshService
@implements IDisposable

<PageTitle>Items</PageTitle>

<h3>Items</h3>

<DataInit Data="ItemList">
    <ChildContent Context="itemList">
        <ItemsComponent ItemList="itemList" InventoryId="Id" Location="Location"/>
    </ChildContent>
</DataInit>


@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int LocationId { get; set; }

    private List<Item>? ItemList { get; set; }

    Location? Location { get; set; }

    protected override async Task OnInitializedAsync() {
        SidebarItems.Add(new SidebarItem {
            Name = "Locations",
            Link = $"{Id}/locations",
            Icon = Icons.Material.Filled.LocationCity
        });
        SidebarItems.Add(new SidebarItem {
            Name = "Items",
            Link = $"{Id}/items",
            Icon = Icons.Material.Filled.Build
        });

        if (LocationId is not 0) {
            ItemList = await ItemRepository.ReadGraphAsync(Id, LocationId);
        }
        else {
            ItemList = await ItemRepository.ReadGraphAsync(Id);
        }
        
        ViewRefreshService.HandleViewChange += Refresh;

        await base.OnInitializedAsync();
    }
    
    async void Refresh() {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose() {
        ViewRefreshService.HandleViewChange -= Refresh;
    }
}