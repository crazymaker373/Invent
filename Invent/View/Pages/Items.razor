@page "/{id:int}/items"
@inherits SidebarComponent
@inject IItemRepository ItemRepository
@inject IDialogService DialogService

<PageTitle>Items</PageTitle>


<h3>Items</h3>

<DataInit Data="ItemList">
    <ChildContent Context="itemList">
        <MudDataGrid T="Item" MultiSelection="true" Items="@itemList" SortMode="SortMode.Multiple" Filterable="true"
                     Hideable="true" Virtualize="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Items</MudText>
                <MudSpacer/>
                <MudTextField T="string" Value="_searchString" ValueChanged="Search" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <Columns>
                <HierarchyColumn T="Item"/>
                <Column T="Item" Field="Id" Title="Nr" Filterable="false"/>
                <Column T="Item" Field="Name"/>
                <Column T="Item" Title="Position" Sortable="false">
                    <CellTemplate>
                        <MudText>@context.Item.Location.Name</MudText>
                    </CellTemplate>
                </Column>
                <Column T="Item" Field="ItemType"/>
                <Column T="Item" Field="Code" Sortable="false"/>
                <Column T="Item" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OpenDeleteItemDialog(context.Item)"/>
                        <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OpenEditItemDialog(context.Item)"/>
                    </CellTemplate>
                </Column>
            </Columns>
            <ChildRowContent>
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@context.Item.Description</MudText>
                    </MudCardContent>
                </MudCard>
            </ChildRowContent>
            <PagerContent>
                <MudDataGridPager T="Item"/>
            </PagerContent>
        </MudDataGrid>
        
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Class="floating-button" @onclick="OpenCreateItemDialog"/>
        <MudFab Class="floating-button" Style="right: 100px !important;" Color="Color.Primary" OnClick="OpenCreateLocationDialog" StartIcon="@Icons.Material.Filled.Add"/>

    </ChildContent>
</DataInit>



@code {

    [Parameter]
    public int Id { get; set; }

    private List<Item> ItemList { get; set; } = null!;
    private List<Item> ItemListBackup { get; set; } = null!;
    private string? _searchString;

    protected override async Task OnInitializedAsync() {
        ItemList = await ItemRepository.ReadGraphAsync(Id);
        ItemListBackup = ItemList;

        SidebarItems.Add(new SidebarItem {
            Name = "Locations",
            Link = $"{Id}/locations"
        });
        SidebarItems.Add(new SidebarItem {
            Name = "Items",
            Link = $"{Id}/items"
        });
        await base.OnInitializedAsync();
        
    }

    void Search(string? searchString) {
        _searchString = searchString;
        if (!string.IsNullOrEmpty(_searchString) || !string.IsNullOrWhiteSpace(_searchString)) {
            ItemList = ItemListBackup.Where(x => x.Name.Contains(_searchString)).ToList();
        }
        else {
            ItemList = ItemListBackup;
        }
    }


    private async void OpenCreateItemDialog() {
        var parameters = new DialogParameters {{"InventoryId", Id}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<CreateItemDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultItem = (Item) result.Data;
        ItemList.Add(resultItem);
        StateHasChanged();
    }

    private void OpenCreateLocationDialog() {
        var parameters = new DialogParameters {{"InventoryId", Id}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        DialogService.Show<CreateLocationDialog>("", parameters, options);
    }

    private async void OpenDeleteItemDialog(Item item) {
        var parameters = new DialogParameters {{"Item", item}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<DeleteItemDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultItem = (Item) result.Data;
        var index = ItemList.IndexOf(resultItem);
        ItemList.RemoveAt(index);
        StateHasChanged();
    }

    private async void OpenEditItemDialog(Item item) {
        var parameters = new DialogParameters {{"Item", item}, {"InventoryId", Id}};
        var options = new DialogOptions {CloseOnEscapeKey = true, FullWidth = true};
        var dialog = DialogService.Show<EditItemDialog>("", parameters, options);

        var result = await dialog.Result;
        if (result.Cancelled) return;
        var resultItem = (Item) result.Data;
        var index = ItemList.IndexOf(resultItem);
        ItemList[index] = resultItem;
        StateHasChanged();
    }

}